<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Messages - Andrew Cares Village</title>

    <!-- Enhanced Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">

    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
    
    <!-- Animate.css for smooth animations -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css">

    <style>
        /* Enhanced Professional Variables */
        :root {
            --primary-color: #6366f1;
            --primary-hover: #5b21b6;
            --secondary-color: #0f172a;
            --background-color: #f8fafc;
            --background-secondary: #f1f5f9;
            --text-primary: #0f172a;
            --text-secondary: #64748b;
            --text-muted: #94a3b8;
            --card-bg: #ffffff;
            --border-color: #e2e8f0;
            --border-light: #f1f5f9;
            --hover-bg: #f8fafc;
            --success-color: #10b981;
            --danger-color: #ef4444;
            --warning-color: #f59e0b;
            --info-color: #3b82f6;
            
            /* Enhanced Shadows */
            --shadow-xs: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
            --shadow-sm: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px -1px rgba(0, 0, 0, 0.1);
            --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -2px rgba(0, 0, 0, 0.1);
            --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -4px rgba(0, 0, 0, 0.1);
            --shadow-xl: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 8px 10px -6px rgba(0, 0, 0, 0.1);
            
            /* Professional Gradients */
            --gradient-primary: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            --gradient-secondary: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
            --gradient-success: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            --gradient-message-sent: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            --gradient-message-received: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
        }

        /* Base Styles */
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
            background: var(--background-color);
            color: var(--text-primary);
            line-height: 1.6;
            display: flex;
            flex-direction: column;
            height: 100vh;
            overflow: hidden;
            font-weight: 400;
            letter-spacing: -0.01em;
        }

        a {
            text-decoration: none;
            color: inherit;
        }

        /* Enhanced Header with Glass Effect */
        .main-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.875rem 1.5rem;
            background: rgba(255, 255, 255, 0.95);
            -webkit-backdrop-filter: blur(20px);
            backdrop-filter: blur(20px);
            border-bottom: 1px solid var(--border-light);
            position: relative;
            flex-shrink: 0;
            box-shadow: var(--shadow-sm);
        }

        .logo {
            font-family: 'Inter', serif;
            font-weight: 700;
            font-size: 1.25rem;
            color: var(--secondary-color);
            flex-shrink: 0;
            background: var(--gradient-primary);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        /* Mobile Navigation */
        .main-nav {
            display: none;
            position: absolute;
            top: 100%;
            left: 0;
            right: 0;
            background: rgba(255, 255, 255, 0.98);
            -webkit-backdrop-filter: blur(20px);
            backdrop-filter: blur(20px);
            border-top: 1px solid var(--border-light);
            flex-direction: column;
            padding: 1.5rem;
            gap: 1rem;
            box-shadow: var(--shadow-md);
            z-index: 1000;
        }

        .main-nav.mobile-open {
            display: flex;
        }

        .main-nav a {
            font-weight: 500;
            color: var(--text-secondary);
            padding: 0.875rem 0;
            border-bottom: 2px solid transparent;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            text-align: center;
            border-radius: 8px;
        }

        .main-nav a:hover {
            color: var(--primary-color);
            background: var(--hover-bg);
        }

        .mobile-menu-toggle {
            display: block;
            background: none;
            border: none;
            font-size: 1.5rem;
            color: var(--text-primary);
            cursor: pointer;
            padding: 0.5rem;
            min-height: 44px;
            min-width: 44px;
            border-radius: 12px;
            transition: all 0.3s ease;
        }

        .mobile-menu-toggle:hover {
            background: var(--hover-bg);
            transform: scale(1.05);
        }

        .header-actions {
            display: flex;
            align-items: center;
            gap: 1rem;
            flex-shrink: 0;
        }

        .user-profile-nav {
            position: relative;
            display: flex;
            align-items: center;
            gap: 0.75rem;
            cursor: pointer;
            padding: 0.5rem;
            border-radius: 12px;
            transition: all 0.3s ease;
        }

        .user-profile-nav:hover {
            background: var(--hover-bg);
        }

        .user-avatar-nav {
            width: 38px;
            height: 38px;
            border-radius: 12px;
            object-fit: cover;
            border: 2px solid var(--border-light);
            transition: all 0.3s ease;
        }

        .user-avatar-nav:hover {
            border-color: var(--primary-color);
            transform: scale(1.05);
        }

        .user-name-nav {
            font-weight: 600;
            font-size: 0.875rem;
            display: none;
        }

        .profile-dropdown {
            display: none;
            position: absolute;
            top: 120%;
            right: 0;
            background: rgba(255, 255, 255, 0.98);
            -webkit-backdrop-filter: blur(20px);
            backdrop-filter: blur(20px);
            border-radius: 12px;
            box-shadow: var(--shadow-lg);
            width: 220px;
            overflow: hidden;
            z-index: 1001;
            border: 1px solid var(--border-light);
        }

        .user-profile-nav:hover .profile-dropdown {
            display: block;
        }

        .profile-dropdown a,
        .profile-dropdown button {
            display: block;
            width: 100%;
            padding: 1rem 1.25rem;
            background: none;
            border: none;
            text-align: left;
            cursor: pointer;
            font-size: 0.875rem;
            font-weight: 500;
            transition: all 0.3s ease;
        }

        .profile-dropdown a:hover,
        .profile-dropdown button:hover {
            background: var(--hover-bg);
        }

        .profile-dropdown .logout-button {
            color: var(--danger-color);
        }

        /* Enhanced Messaging Layout */
        .messaging-container {
            display: block;
            position: relative;
            height: calc(100vh - 77px);
            overflow: hidden;
            background: var(--card-bg);
        }

        /* Enhanced Conversation List */
        .conversation-list {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            display: flex;
            flex-direction: column;
            overflow: hidden;
            background: var(--card-bg);
            transition: transform 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            z-index: 10;
        }

        .conversation-list-header {
            padding: 1.5rem;
            border-bottom: 1px solid var(--border-light);
            flex-shrink: 0;
            background: linear-gradient(135deg, var(--card-bg), var(--background-secondary));
        }

        .conversation-header-top {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
        }

        .conversation-list-header h2 {
            font-family: 'Inter', serif;
            font-size: 1.5rem;
            font-weight: 700;
            color: var(--secondary-color);
        }

        /* Group Chat Button */
        .create-group-btn {
            background: var(--gradient-primary);
            color: white;
            border: none;
            padding: 0.75rem 1rem;
            border-radius: 12px;
            font-size: 0.875rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            box-shadow: var(--shadow-sm);
        }

        .create-group-btn:hover {
            transform: translateY(-1px);
            box-shadow: var(--shadow-md);
        }

        .conversation-search {
            position: relative;
            margin-top: 1rem;
        }

        .conversation-search input {
            width: 100%;
            padding: 0.875rem 1rem 0.875rem 3rem;
            border: 2px solid var(--border-color);
            border-radius: 12px;
            font-size: 0.875rem;
            font-family: inherit;
            transition: all 0.3s ease;
            background: var(--background-secondary);
        }

        .conversation-search input:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.1);
            transform: translateY(-1px);
        }

        .conversation-search i {
            position: absolute;
            left: 1rem;
            top: 50%;
            transform: translateY(-50%);
            color: var(--text-muted);
        }

        .conversation-list-body {
            overflow-y: auto;
            flex-grow: 1;
            background: var(--card-bg);
        }

        .conversation-item {
            display: flex;
            align-items: center;
            padding: 1.25rem 1.5rem;
            cursor: pointer;
            border-bottom: 1px solid var(--border-light);
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            min-height: 85px;
            position: relative;
        }

        .conversation-item::before {
            content: '';
            position: absolute;
            left: 0;
            top: 0;
            bottom: 0;
            width: 4px;
            background: var(--gradient-primary);
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .conversation-item:hover {
            background: var(--hover-bg);
            transform: translateX(4px);
        }

        .conversation-item:hover::before {
            opacity: 1;
        }

        .conversation-item.active {
            background: linear-gradient(135deg, rgba(99, 102, 241, 0.05), rgba(139, 92, 246, 0.05));
            border-left: 4px solid var(--primary-color);
            transform: translateX(0);
        }

        .conversation-item.active::before {
            opacity: 1;
        }

        .conversation-item.active .convo-name {
            color: var(--primary-color);
            font-weight: 600;
        }

        .convo-avatar-wrapper {
            position: relative;
            margin-right: 1rem;
            flex-shrink: 0;
        }

        .convo-avatar {
            width: 52px;
            height: 52px;
            border-radius: 14px;
            object-fit: cover;
            box-shadow: var(--shadow-sm);
            transition: all 0.3s ease;
        }

        .conversation-item:hover .convo-avatar {
            transform: scale(1.05);
            box-shadow: var(--shadow-md);
        }

        /* Group Avatar Styles */
        .group-avatar {
            position: relative;
            width: 52px;
            height: 52px;
            border-radius: 14px;
            background: var(--gradient-primary);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: 600;
            font-size: 1.25rem;
        }

        .group-members-count {
            position: absolute;
            bottom: -2px;
            right: -2px;
            background: var(--success-color);
            color: white;
            border-radius: 50%;
            width: 18px;
            height: 18px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.75rem;
            font-weight: 600;
            border: 2px solid var(--card-bg);
        }

        .online-indicator {
            position: absolute;
            bottom: 2px;
            right: 2px;
            width: 14px;
            height: 14px;
            border-radius: 50%;
            border: 3px solid var(--card-bg);
            background: var(--success-color);
            box-shadow: var(--shadow-sm);
        }

        .online-indicator.offline {
            background: var(--text-muted);
        }

        /* Real-time online status */
        .online-indicator.truly-online {
            background: var(--success-color);
            animation: onlinePulse 2s infinite;
        }

        @keyframes onlinePulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.7; }
        }

        .convo-details {
            flex-grow: 1;
            overflow: hidden;
            min-width: 0;
        }

        .convo-name {
            font-weight: 600;
            font-size: 1rem;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            margin-bottom: 0.25rem;
            transition: all 0.3s ease;
        }

        .last-message {
            font-size: 0.875rem;
            color: var(--text-secondary);
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .message-status {
            font-size: 0.75rem;
            color: var(--text-muted);
        }

        .unread-count {
            background: var(--gradient-secondary);
            color: white;
            border-radius: 12px;
            padding: 0.25rem 0.5rem;
            font-size: 0.75rem;
            font-weight: 600;
            min-width: 20px;
            text-align: center;
            margin-left: auto;
            flex-shrink: 0;
        }

        .conversation-time {
            font-size: 0.75rem;
            color: var(--text-muted);
            margin-left: auto;
            flex-shrink: 0;
        }

        /* Enhanced Chat Window */
        .chat-window {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            display: flex;
            flex-direction: column;
            overflow: hidden;
            background: var(--card-bg);
            transform: translateX(100%);
            transition: transform 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            z-index: 20;
        }

        .messaging-container.show-chat .conversation-list {
            transform: translateX(-100%);
        }

        .messaging-container.show-chat .chat-window {
            transform: translateX(0);
        }

        .chat-window-placeholder {
            flex-grow: 1;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            text-align: center;
            color: var(--text-secondary);
            padding: 3rem 2rem;
            background: linear-gradient(135deg, var(--background-color), var(--background-secondary));
        }

        .chat-window-placeholder i {
            font-size: 5rem;
            margin-bottom: 2rem;
            color: var(--text-muted);
            opacity: 0.5;
        }

        .chat-window-placeholder h2 {
            font-size: 1.5rem;
            font-weight: 600;
            margin-bottom: 0.75rem;
            color: var(--text-primary);
        }

        .chat-window-placeholder p {
            font-size: 1rem;
            line-height: 1.6;
            max-width: 400px;
        }

        /* Enhanced Chat Header */
        .chat-header {
            padding: 1.25rem 1.5rem;
            border-bottom: 1px solid var(--border-light);
            display: flex;
            align-items: center;
            gap: 1rem;
            flex-shrink: 0;
            background: linear-gradient(135deg, var(--card-bg), var(--background-secondary));
            -webkit-backdrop-filter: blur(10px);
            backdrop-filter: blur(10px);
        }

        .mobile-back-btn {
            background: none;
            border: none;
            font-size: 1.25rem;
            color: var(--text-secondary);
            cursor: pointer;
            padding: 0.75rem;
            margin-right: 0.5rem;
            min-height: 44px;
            min-width: 44px;
            border-radius: 12px;
            transition: all 0.3s ease;
        }

        .mobile-back-btn:hover {
            background: var(--hover-bg);
            color: var(--primary-color);
            transform: translateX(-2px);
        }

        .chat-header-info {
            display: flex;
            align-items: center;
            gap: 1rem;
            flex-grow: 1;
        }

        .chat-header-avatar {
            width: 48px;
            height: 48px;
            border-radius: 14px;
            object-fit: cover;
            box-shadow: var(--shadow-sm);
        }

        .chat-header-details h3 {
            font-family: 'Inter', serif;
            font-size: 1.125rem;
            font-weight: 600;
            color: var(--text-primary);
            margin-bottom: 0.125rem;
        }

        .chat-header-status {
            font-size: 0.875rem;
            color: var(--text-secondary);
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .typing-indicator {
            color: var(--success-color);
            font-style: italic;
        }

        .chat-header-actions {
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }

        .chat-action-btn {
            background: none;
            border: none;
            font-size: 1.125rem;
            color: var(--text-secondary);
            cursor: pointer;
            padding: 0.75rem;
            border-radius: 12px;
            transition: all 0.3s ease;
            min-height: 44px;
            min-width: 44px;
        }

        .chat-action-btn:hover {
            background: var(--hover-bg);
            color: var(--primary-color);
            transform: translateY(-1px);
        }

        /* Enhanced Message Area */
        .message-area {
            flex-grow: 1;
            overflow-y: auto;
            padding: 0;
            min-height: 0;
            background: linear-gradient(135deg, var(--background-color), var(--background-secondary));
            position: relative;
        }

        .message-list {
            padding: 1.5rem;
            display: flex;
            flex-direction: column;
            gap: 1rem;
            min-height: 100%;
        }

        /* Enhanced Message Bubbles */
        .message-bubble {
            max-width: 75%;
            padding: 0.875rem 1.25rem;
            border-radius: 20px;
            line-height: 1.5;
            position: relative;
            word-wrap: break-word;
            box-shadow: var(--shadow-xs);
            transition: all 0.3s ease;
            animation: messageSlideIn 0.4s cubic-bezier(0.4, 0, 0.2, 1);
        }

        @keyframes messageSlideIn {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .message-bubble.sent {
            background: var(--gradient-message-sent);
            color: white;
            border-bottom-right-radius: 6px;
            align-self: flex-end;
            margin-left: auto;
        }

        .message-bubble.received {
            background: var(--card-bg);
            color: var(--text-primary);
            border-bottom-left-radius: 6px;
            align-self: flex-start;
            border: 1px solid var(--border-light);
        }

        .message-bubble:hover {
            transform: translateY(-1px);
            box-shadow: var(--shadow-md);
        }

        .message-content {
            margin-bottom: 0.5rem;
        }

        .message-timestamp {
            font-size: 0.75rem;
            opacity: 0.8;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .message-status-icon {
            font-size: 0.675rem;
        }

        .message-status-icon.delivered {
            color: var(--text-muted);
        }

        .message-status-icon.read {
            color: var(--info-color);
        }

        /* Enhanced Media Message Styles */
        .message-image {
            border-radius: 12px;
            max-width: 100%;
            max-height: 300px;
            object-fit: cover;
            margin-bottom: 0.5rem;
            box-shadow: var(--shadow-sm);
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .message-image:hover {
            transform: scale(1.02);
            box-shadow: var(--shadow-md);
        }

        .message-video {
            border-radius: 12px;
            max-width: 100%;
            max-height: 300px;
            margin-bottom: 0.5rem;
            box-shadow: var(--shadow-sm);
        }

        .message-file {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            padding: 1rem;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 12px;
            margin-bottom: 0.5rem;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .message-file:hover {
            background: rgba(255, 255, 255, 0.2);
        }

        .file-icon {
            font-size: 1.5rem;
            color: var(--primary-color);
        }

        .file-info h4 {
            font-size: 0.875rem;
            font-weight: 600;
            margin-bottom: 0.25rem;
        }

        .file-size {
            font-size: 0.75rem;
            opacity: 0.8;
        }

        /* Enhanced Message Input */
        .message-input-area {
            padding: 1.5rem;
            border-top: 1px solid var(--border-light);
            display: flex;
            align-items: flex-end;
            gap: 1rem;
            flex-shrink: 0;
            background: var(--card-bg);
            -webkit-backdrop-filter: blur(10px);
            backdrop-filter: blur(10px);
        }

        .input-wrapper {
            flex-grow: 1;
            position: relative;
        }

        .message-input {
            width: 100%;
            border: 2px solid var(--border-color);
            background: var(--background-secondary);
            padding: 0.875rem 3.5rem 0.875rem 1.25rem;
            border-radius: 24px;
            font-family: 'Inter', sans-serif;
            font-size: 0.95rem;
            min-height: 48px;
            max-height: 120px;
            resize: none;
            transition: all 0.3s ease;
            overflow-y: auto;
        }

        .message-input:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.1);
            transform: translateY(-1px);
        }

        .message-input::placeholder {
            color: var(--text-muted);
        }

        .input-actions {
            position: absolute;
            right: 0.75rem;
            bottom: 50%;
            transform: translateY(50%);
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .input-action-btn {
            background: none;
            border: none;
            font-size: 1.125rem;
            color: var(--text-muted);
            cursor: pointer;
            padding: 0.5rem;
            border-radius: 8px;
            transition: all 0.3s ease;
            min-height: 36px;
            min-width: 36px;
        }

        .input-action-btn:hover {
            background: var(--hover-bg);
            color: var(--primary-color);
            transform: scale(1.05);
        }

        .send-btn {
            background: var(--gradient-primary);
            color: white;
            border: none;
            width: 48px;
            height: 48px;
            border-radius: 50%;
            font-size: 1.25rem;
            cursor: pointer;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            flex-shrink: 0;
            display: flex;
            align-items: center;
            justify-content: center;
            box-shadow: var(--shadow-sm);
        }

        .send-btn:hover {
            transform: translateY(-2px) scale(1.05);
            box-shadow: var(--shadow-md);
        }

        .send-btn:disabled {
            background: var(--text-muted);
            cursor: not-allowed;
            transform: none;
            opacity: 0.6;
        }

        /* Typing Indicator */
        .typing-indicator-bubble {
            max-width: 75%;
            padding: 1rem 1.25rem;
            border-radius: 20px;
            border-bottom-left-radius: 6px;
            align-self: flex-start;
            background: var(--card-bg);
            border: 1px solid var(--border-light);
            display: flex;
            align-items: center;
            gap: 0.5rem;
            animation: typingFadeIn 0.4s ease;
        }

        @keyframes typingFadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .typing-dots {
            display: flex;
            gap: 0.25rem;
        }

        .typing-dot {
            width: 6px;
            height: 6px;
            border-radius: 50%;
            background: var(--text-muted);
            animation: typingBounce 1.4s infinite;
        }

        .typing-dot:nth-child(1) { animation-delay: 0ms; }
        .typing-dot:nth-child(2) { animation-delay: 200ms; }
        .typing-dot:nth-child(3) { animation-delay: 400ms; }

        @keyframes typingBounce {
            0%, 60%, 100% { transform: translateY(0); }
            30% { transform: translateY(-10px); }
        }

        /* Enhanced Loading States */
        .loading {
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 3rem;
            color: var(--text-secondary);
            flex-direction: column;
            gap: 1rem;
        }

        .spinner {
            width: 32px;
            height: 32px;
            border: 3px solid var(--border-light);
            border-top: 3px solid var(--primary-color);
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Voice Message Styles */
        .voice-message {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            padding: 0.75rem 1rem;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 12px;
            margin-bottom: 0.5rem;
        }

        .voice-play-btn {
            background: var(--card-bg);
            border: none;
            width: 36px;
            height: 36px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .voice-play-btn:hover {
            transform: scale(1.1);
        }

        .voice-waveform {
            flex-grow: 1;
            height: 32px;
            display: flex;
            align-items: center;
            gap: 2px;
        }

        .voice-bar {
            width: 3px;
            background: rgba(255, 255, 255, 0.6);
            border-radius: 2px;
            transition: all 0.3s ease;
        }

        .voice-duration {
            font-size: 0.75rem;
            opacity: 0.8;
        }

        /* File Upload Modal */
        .upload-modal {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.5);
            -webkit-backdrop-filter: blur(10px);
            backdrop-filter: blur(10px);
            display: none;
            justify-content: center;
            align-items: center;
            z-index: 3000;
        }

        .upload-modal.show {
            display: flex;
        }

        .upload-modal-content {
            background: var(--card-bg);
            border-radius: 16px;
            padding: 2rem;
            max-width: 500px;
            width: 90%;
            box-shadow: var(--shadow-xl);
        }

        .upload-modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
        }

        .upload-modal-header h3 {
            font-size: 1.25rem;
            font-weight: 600;
            color: var(--text-primary);
        }

        .close-modal-btn {
            background: none;
            border: none;
            font-size: 1.5rem;
            color: var(--text-muted);
            cursor: pointer;
            padding: 0.5rem;
            border-radius: 8px;
            transition: all 0.3s ease;
        }

        .close-modal-btn:hover {
            background: var(--hover-bg);
            color: var(--text-primary);
        }

        .upload-area {
            border: 2px dashed var(--border-color);
            border-radius: 12px;
            padding: 3rem 2rem;
            text-align: center;
            transition: all 0.3s ease;
            cursor: pointer;
            margin-bottom: 1rem;
        }

        .upload-area:hover,
        .upload-area.dragover {
            border-color: var(--primary-color);
            background: rgba(99, 102, 241, 0.05);
        }

        .upload-area i {
            font-size: 3rem;
            color: var(--primary-color);
            margin-bottom: 1rem;
        }

        .upload-area p {
            color: var(--text-secondary);
            margin-bottom: 0.5rem;
        }

        .upload-area .file-types {
            font-size: 0.875rem;
            color: var(--text-muted);
        }

        .upload-progress {
            display: none;
            margin-top: 1rem;
        }

        .progress-bar {
            width: 100%;
            height: 8px;
            background: var(--border-light);
            border-radius: 4px;
            overflow: hidden;
            margin-bottom: 0.5rem;
        }

        .progress-fill {
            height: 100%;
            background: var(--gradient-primary);
            width: 0%;
            transition: width 0.3s ease;
        }

        .progress-text {
            font-size: 0.875rem;
            color: var(--text-secondary);
            text-align: center;
        }

        /* Image Preview Modal */
        .image-preview-modal {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.9);
            display: none;
            align-items: center;
            justify-content: center;
            z-index: 4000;
            -webkit-backdrop-filter: blur(10px);
            backdrop-filter: blur(10px);
        }

        .image-preview-modal.show {
            display: flex;
        }

        .image-preview-content {
            position: relative;
            max-width: 90%;
            max-height: 90%;
        }

        .preview-image {
            max-width: 100%;
            max-height: 100%;
            border-radius: 12px;
            box-shadow: var(--shadow-xl);
        }

        .close-preview-btn {
            position: absolute;
            top: -15px;
            right: -15px;
            width: 40px;
            height: 40px;
            background: var(--card-bg);
            border: none;
            border-radius: 50%;
            cursor: pointer;
            font-size: 1.2rem;
            box-shadow: var(--shadow-lg);
            color: var(--text-primary);
            transition: all 0.3s ease;
        }

        .close-preview-btn:hover {
            transform: scale(1.1);
        }

        /* Group Chat Modal */
        .group-modal {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.5);
            -webkit-backdrop-filter: blur(10px);
            backdrop-filter: blur(10px);
            display: none;
            justify-content: center;
            align-items: center;
            z-index: 3000;
        }

        .group-modal.show {
            display: flex;
        }

        .group-modal-content {
            background: var(--card-bg);
            border-radius: 16px;
            padding: 2rem;
            max-width: 600px;
            width: 90%;
            max-height: 80vh;
            overflow-y: auto;
            box-shadow: var(--shadow-xl);
        }

        .group-modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
        }

        .group-modal-header h3 {
            font-size: 1.5rem;
            font-weight: 600;
            color: var(--text-primary);
        }

        .group-form {
            display: flex;
            flex-direction: column;
            gap: 1.5rem;
        }

        .form-group {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }

        .form-group label {
            font-weight: 500;
            color: var(--text-primary);
        }

        .form-group input {
            padding: 0.875rem 1rem;
            border: 2px solid var(--border-color);
            border-radius: 8px;
            font-family: inherit;
            transition: all 0.3s ease;
        }

        .form-group input:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.1);
        }

        .friends-list {
            display: flex;
            flex-direction: column;
            gap: 0.75rem;
            max-height: 300px;
            overflow-y: auto;
            padding: 0.5rem;
            border: 1px solid var(--border-light);
            border-radius: 8px;
        }

        .friend-item {
            display: flex;
            align-items: center;
            gap: 1rem;
            padding: 0.75rem;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .friend-item:hover {
            background: var(--hover-bg);
        }

        .friend-item.selected {
            background: rgba(99, 102, 241, 0.1);
            border: 1px solid var(--primary-color);
        }

        .friend-checkbox {
            width: 20px;
            height: 20px;
            border: 2px solid var(--border-color);
            border-radius: 4px;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
        }

        .friend-item.selected .friend-checkbox {
            background: var(--primary-color);
            border-color: var(--primary-color);
            color: white;
        }

        .friend-avatar-small {
            width: 40px;
            height: 40px;
            border-radius: 8px;
            object-fit: cover;
        }

        .friend-details {
            flex-grow: 1;
        }

        .friend-name {
            font-weight: 500;
            margin-bottom: 0.25rem;
        }

        .friend-status {
            font-size: 0.875rem;
            color: var(--text-secondary);
        }

        .modal-actions {
            display: flex;
            gap: 1rem;
            justify-content: flex-end;
            margin-top: 2rem;
        }

        .btn {
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: 8px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
            font-family: inherit;
        }

        .btn-secondary {
            background: var(--border-light);
            color: var(--text-primary);
        }

        .btn-secondary:hover {
            background: var(--border-color);
        }

        .btn-primary {
            background: var(--gradient-primary);
            color: white;
        }

        .btn-primary:hover {
            transform: translateY(-1px);
            box-shadow: var(--shadow-md);
        }

        .btn-primary:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }

        /* Call Modal */
        .call-modal {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.9);
            display: none;
            align-items: center;
            justify-content: center;
            z-index: 5000;
        }

        .call-modal.show {
            display: flex;
        }

        .call-modal-content {
            text-align: center;
            color: white;
            max-width: 400px;
            width: 90%;
        }

        .call-avatar {
            width: 120px;
            height: 120px;
            border-radius: 50%;
            margin: 0 auto 2rem;
            box-shadow: var(--shadow-xl);
        }

        .call-name {
            font-size: 1.5rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
        }

        .call-status {
            font-size: 1rem;
            color: rgba(255, 255, 255, 0.8);
            margin-bottom: 3rem;
        }

        .call-actions {
            display: flex;
            justify-content: center;
            gap: 2rem;
        }

        .call-btn {
            width: 60px;
            height: 60px;
            border: none;
            border-radius: 50%;
            font-size: 1.5rem;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .call-btn.answer {
            background: var(--success-color);
            color: white;
        }

        .call-btn.decline {
            background: var(--danger-color);
            color: white;
        }

        .call-btn:hover {
            transform: scale(1.1);
        }

        /* Notification Styles */
        .notification {
            position: fixed;
            top: 24px;
            right: 24px;
            padding: 1rem 1.5rem;
            border-radius: 12px;
            color: white;
            font-weight: 500;
            z-index: 3000;
            opacity: 0;
            transform: translateX(100%) scale(0.95);
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            display: flex;
            align-items: center;
            gap: 0.75rem;
            backdrop-filter: blur(10px);
            box-shadow: var(--shadow-lg);
            max-width: 400px;
            font-size: 0.9rem;
        }

        .notification.show {
            opacity: 1;
            transform: translateX(0) scale(1);
        }

        .notification.success {
            background: linear-gradient(135deg, rgba(16, 185, 129, 0.95), rgba(5, 150, 105, 0.95));
        }

        .notification.error {
            background: linear-gradient(135deg, rgba(239, 68, 68, 0.95), rgba(220, 38, 38, 0.95));
        }

        .notification.info {
            background: linear-gradient(135deg, rgba(59, 130, 246, 0.95), rgba(37, 99, 235, 0.95));
        }

        .notification.warning {
            background: linear-gradient(135deg, rgba(245, 158, 11, 0.95), rgba(217, 119, 6, 0.95));
        }

        /* Online Status Indicator */
        .truly-online-indicator {
            position: fixed;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            background: var(--success-color);
            color: white;
            padding: 0.5rem 1rem;
            border-radius: 20px;
            font-size: 0.875rem;
            display: none;
            align-items: center;
            gap: 0.5rem;
            z-index: 2000;
        }

        .truly-online-indicator.show {
            display: flex;
        }

        .online-dot {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background: white;
            animation: onlinePulse 2s infinite;
        }

        /* Tablet Styles */
        @media (min-width: 768px) {
            .main-header {
                padding: 1rem 1.5rem;
            }

            .logo {
                font-size: 1.4rem;
            }

            .mobile-menu-toggle {
                display: none;
            }

            .main-nav {
                display: flex !important;
                position: static;
                background: transparent;
                -webkit-backdrop-filter: none;
                backdrop-filter: none;
                border-top: none;
                flex-direction: row;
                padding: 0;
                gap: 2rem;
                box-shadow: none;
            }

            .main-nav a {
                padding: 0.5rem 0;
                text-align: left;
            }

            .user-name-nav {
                display: inline;
                font-size: 0.875rem;
            }

            .user-avatar-nav {
                width: 40px;
                height: 40px;
            }

            .header-actions {
                gap: 1.5rem;
            }

            .messaging-container {
                display: grid;
                grid-template-columns: 350px 1fr;
                height: calc(100vh - 77px);
            }

            .conversation-list {
                position: static;
                width: auto;
                height: auto;
                transform: none;
                transition: none;
                z-index: auto;
                border-right: 1px solid var(--border-light);
            }

            .chat-window {
                position: static;
                width: auto;
                height: auto;
                transform: none;
                transition: none;
                z-index: auto;
            }

            .mobile-back-btn {
                display: none;
            }

            .conversation-list-header {
                padding: 2rem;
            }

            .conversation-list-header h2 {
                font-size: 1.75rem;
            }

            .conversation-item {
                padding: 1.5rem 2rem;
            }

            .chat-header {
                padding: 1.5rem 2rem;
            }

            .message-list {
                padding: 2rem;
                gap: 1.25rem;
            }

            .message-bubble {
                max-width: 65%;
                padding: 1rem 1.5rem;
            }

            .message-input-area {
                padding: 1.5rem 2rem;
                gap: 1.25rem;
            }

            .message-input {
                padding: 1rem 4rem 1rem 1.5rem;
                font-size: 1rem;
            }

            .send-btn {
                width: 52px;
                height: 52px;
                font-size: 1.5rem;
            }
        }

        /* Desktop/Laptop Styles */
        @media (min-width: 1024px) {
            .messaging-container {
                grid-template-columns: 380px 1fr;
            }

            .conversation-list-header h2 {
                font-size: 1.875rem;
            }
        }

        /* Large Desktop */
        @media (min-width: 1440px) {
            .messaging-container {
                grid-template-columns: 420px 1fr;
            }
        }

        /* Dark mode support */
        @media (prefers-color-scheme: dark) {
            :root {
                --background-color: #0f172a;
                --background-secondary: #1e293b;
                --text-primary: #f8fafc;
                --text-secondary: #cbd5e1;
                --text-muted: #64748b;
                --card-bg: #1e293b;
                --border-color: #334155;
                --border-light: #475569;
                --hover-bg: #334155;
            }
        }

        /* Accessibility improvements */
        @media (prefers-reduced-motion: reduce) {
            .conversation-list,
            .chat-window,
            .main-nav,
            .message-bubble,
            .typing-indicator-bubble {
                transition: none;
                animation: none;
            }
        }

        /* Recording indicator */
        .recording-indicator {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: rgba(0, 0, 0, 0.8);
            color: white;
            padding: 2rem;
            border-radius: 16px;
            text-align: center;
            display: none;
            z-index: 4000;
            backdrop-filter: blur(10px);
        }

        .recording-indicator.show {
            display: block;
        }

        .recording-wave {
            width: 60px;
            height: 60px;
            border-radius: 50%;
            background: var(--danger-color);
            margin: 0 auto 1rem;
            animation: recordingPulse 1s infinite;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem;
        }

        @keyframes recordingPulse {
            0%, 100% { transform: scale(1); opacity: 1; }
            50% { transform: scale(1.1); opacity: 0.8; }
        }

        .recording-text {
            font-size: 1.125rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
        }

        .recording-duration {
            font-size: 0.875rem;
            opacity: 0.8;
        }
    </style>
</head>

<body>
    <!-- Enhanced Header -->
    <header class="main-header">
        <a href="home.html" class="logo">Andrew Cares Village</a>
        
        <button class="mobile-menu-toggle" id="mobileMenuToggle" aria-label="Toggle menu">
            <i class="fas fa-bars"></i>
        </button>
        
        <nav class="main-nav" id="mainNav">
            <a href="home.html">Home</a>
            <a href="dojo.html?discipline=Forex">Forex Training</a>
            <a href="dojo.html?discipline=Fitness">Fitness Training</a>
            <a href="dojo.html?discipline=Karate">Karate Training</a>
        </nav>
        
        <div class="header-actions">
            <div id="userProfileNav" class="user-profile-nav">
                <img id="userAvatarNav" src="" alt="User Avatar" class="user-avatar-nav">
                <span id="userNameNav" class="user-name-nav">Loading...</span>
                <div class="profile-dropdown">
                    <a href="profile.html">My Profile</a>
                    <a href="friends.html">Friends</a>
                    <button id="logoutButton" class="logout-button">Logout</button>
                </div>
            </div>
        </div>
    </header>

    <!-- Enhanced Main Content -->
    <main class="messaging-container" id="messagingContainer">
        <!-- Left Pane: Conversation List -->
        <aside class="conversation-list">
            <div class="conversation-list-header">
                <div class="conversation-header-top">
                    <h2>Messages</h2>
                    <button class="create-group-btn" onclick="showGroupModal()">
                        <i class="fas fa-users"></i>
                        New Group
                    </button>
                </div>
                <div class="conversation-search">
                    <input type="text" placeholder="Search conversations..." id="conversationSearch">
                    <i class="fas fa-search"></i>
                </div>
            </div>
            <div class="conversation-list-body" id="conversationListBody">
                <div class="loading">
                    <div class="spinner"></div>
                    Loading conversations...
                </div>
            </div>
        </aside>

        <!-- Right Pane: Chat Window -->
        <section class="chat-window" id="chatWindow">
            <div class="chat-window-placeholder" id="chatWindowPlaceholder">
                <i class="fas fa-comments"></i>
                <h2>Select a conversation</h2>
                <p>Choose from your friends list to start chatting, or send voice messages, images, and files.</p>
            </div>
        </section>
    </main>

    <!-- Enhanced File Upload Modal -->
    <div class="upload-modal" id="uploadModal">
        <div class="upload-modal-content">
            <div class="upload-modal-header">
                <h3>Upload File</h3>
                <button class="close-modal-btn" onclick="closeUploadModal()">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="upload-area" id="uploadArea">
                <i class="fas fa-cloud-upload-alt"></i>
                <p>Drag and drop files here or click to browse</p>
                <div class="file-types">Images, Videos, Documents (Max 10MB)</div>
                <input type="file" id="fileInput" style="display: none;" accept="image/*,video/*,audio/*,.pdf,.doc,.docx,.txt,.zip">
            </div>
            <div class="upload-progress" id="uploadProgress">
                <div class="progress-bar">
                    <div class="progress-fill" id="progressFill"></div>
                </div>
                <div class="progress-text" id="progressText">Uploading... 0%</div>
            </div>
        </div>
    </div>

    <!-- Image Preview Modal -->
    <div class="image-preview-modal" id="imagePreviewModal">
        <div class="image-preview-content">
            <img id="previewImage" class="preview-image" src="" alt="Preview">
            <button class="close-preview-btn" onclick="closeImagePreview()">
                <i class="fas fa-times"></i>
            </button>
        </div>
    </div>

    <!-- Group Chat Creation Modal -->
    <div class="group-modal" id="groupModal">
        <div class="group-modal-content">
            <div class="group-modal-header">
                <h3>Create New Group</h3>
                <button class="close-modal-btn" onclick="closeGroupModal()">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <form class="group-form" id="groupForm">
                <div class="form-group">
                    <label for="groupName">Group Name</label>
                    <input type="text" id="groupName" placeholder="Enter group name" required>
                </div>
                <div class="form-group">
                    <label for="groupDescription">Description (Optional)</label>
                    <input type="text" id="groupDescription" placeholder="What's this group about?">
                </div>
                <div class="form-group">
                    <label>Select Friends</label>
                    <div class="friends-list" id="friendsList">
                        <!-- Friends will be populated by JavaScript -->
                    </div>
                </div>
                <div class="modal-actions">
                    <button type="button" class="btn btn-secondary" onclick="closeGroupModal()">Cancel</button>
                    <button type="submit" class="btn btn-primary" id="createGroupBtn" disabled>Create Group</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Call Modal -->
    <div class="call-modal" id="callModal">
        <div class="call-modal-content">
            <img id="callAvatar" class="call-avatar" src="" alt="Caller">
            <div id="callName" class="call-name"></div>
            <div id="callStatus" class="call-status">Incoming call...</div>
            <div class="call-actions">
                <button class="call-btn answer" onclick="answerCall()">
                    <i class="fas fa-phone"></i>
                </button>
                <button class="call-btn decline" onclick="declineCall()">
                    <i class="fas fa-phone-slash"></i>
                </button>
            </div>
        </div>
    </div>

    <!-- Recording Indicator -->
    <div class="recording-indicator" id="recordingIndicator">
        <div class="recording-wave">
            <i class="fas fa-microphone"></i>
        </div>
        <div class="recording-text">Recording voice message</div>
        <div class="recording-duration" id="recordingDuration">00:00</div>
        <p style="margin-top: 1rem; opacity: 0.8;">Tap anywhere to stop recording</p>
    </div>

    <!-- Online Status Indicator -->
    <div class="truly-online-indicator" id="onlineIndicator">
        <div class="online-dot"></div>
        You are online
    </div>

    <!-- Enhanced JavaScript with All New Features -->
    <script type="module">
        // Firebase SDK Imports
        import { initializeApp } from "https://www.gstatic.com/firebasejs/9.15.0/firebase-app.js";
        import { getAuth, onAuthStateChanged, signOut } from "https://www.gstatic.com/firebasejs/9.15.0/firebase-auth.js";
        import { getFirestore, doc, getDoc, collection, query, where, getDocs, addDoc, serverTimestamp, onSnapshot, orderBy, limit, updateDoc, deleteDoc, setDoc } from "https://www.gstatic.com/firebasejs/9.15.0/firebase-firestore.js";
        import { getStorage, ref, uploadBytes, getDownloadURL, uploadBytesResumable } from "https://www.gstatic.com/firebasejs/9.15.0/firebase-storage.js";

        // Firebase Configuration
        const firebaseConfig = {
            apiKey: "AIzaSyAM8S_LtlBaqfp7WoU6xLdaEMIyW_cZHRc",
            authDomain: "andrew-cares-village-f4cb6.firebaseapp.com",
            projectId: "andrew-cares-village-f4cb6",
            storageBucket: "andrew-cares-village-f4cb6.firebasestorage.app",
            messagingSenderId: "255087116955",
            appId: "1:255087116955:web:84360ee1f13888f9b83c3e"
        };

        const app = initializeApp(firebaseConfig);
        const auth = getAuth(app);
        const db = getFirestore(app);
        const storage = getStorage(app);

        // Cloudinary Configuration (Free tier)
        const CLOUDINARY_UPLOAD_URL = 'https://api.cloudinary.com/v1_1/demo/auto/upload';
        const CLOUDINARY_UPLOAD_PRESET = 'ml_default'; // Use demo preset or create your own

        // Enhanced Global State
        let currentAuthUser = null;
        let currentAuthUserData = null;
        let activeChatUnsubscribe = null;
        let friendsUnsubscribe = null;
        let presenceUnsubscribe = null;
        let friends = new Map();
        let groups = new Map();
        let currentChatFriend = null;
        let currentGroupChat = null;
        let isTyping = false;
        let typingTimeout = null;
        let mediaRecorder = null;
        let audioChunks = [];
        let recordingStartTime = null;
        let recordingInterval = null;
        let onlineUsers = new Set();

        // DOM Elements
        const userNameNavEl = document.getElementById('userNameNav');
        const userAvatarNavEl = document.getElementById('userAvatarNav');
        const logoutButton = document.getElementById('logoutButton');
        const conversationListBody = document.getElementById('conversationListBody');
        const chatWindow = document.getElementById('chatWindow');
        const messagingContainer = document.getElementById('messagingContainer');
        const mobileMenuToggle = document.getElementById('mobileMenuToggle');
        const mainNav = document.getElementById('mainNav');
        const conversationSearch = document.getElementById('conversationSearch');
        const uploadModal = document.getElementById('uploadModal');
        const uploadArea = document.getElementById('uploadArea');
        const fileInput = document.getElementById('fileInput');
        const uploadProgress = document.getElementById('uploadProgress');
        const progressFill = document.getElementById('progressFill');
        const progressText = document.getElementById('progressText');
        const imagePreviewModal = document.getElementById('imagePreviewModal');
        const previewImage = document.getElementById('previewImage');
        const groupModal = document.getElementById('groupModal');
        const groupForm = document.getElementById('groupForm');
        const friendsList = document.getElementById('friendsList');
        const createGroupBtn = document.getElementById('createGroupBtn');
        const callModal = document.getElementById('callModal');
        const recordingIndicator = document.getElementById('recordingIndicator');
        const recordingDuration = document.getElementById('recordingDuration');
        const onlineIndicator = document.getElementById('onlineIndicator');

        // Initialize Application
        async function initializeApp() {
            setupMobileMenu();
            setupFileUpload();
            setupGroupModal();
            setupPresenceSystem();
            
            // Show online indicator
            setTimeout(() => {
                onlineIndicator.classList.add('show');
                setTimeout(() => onlineIndicator.classList.remove('show'), 3000);
            }, 1000);
        }

        // Enhanced Mobile Menu Setup
        function setupMobileMenu() {
            mobileMenuToggle.addEventListener('click', () => {
                mainNav.classList.toggle('mobile-open');
                const icon = mobileMenuToggle.querySelector('i');
                icon.className = mainNav.classList.contains('mobile-open') ? 'fas fa-times' : 'fas fa-bars';
            });

            document.addEventListener('click', (e) => {
                if (!mobileMenuToggle.contains(e.target) && !mainNav.contains(e.target)) {
                    mainNav.classList.remove('mobile-open');
                    const icon = mobileMenuToggle.querySelector('i');
                    icon.className = 'fas fa-bars';
                }
            });

            window.addEventListener('resize', () => {
                if (window.innerWidth >= 768) {
                    mainNav.classList.remove('mobile-open');
                    const icon = mobileMenuToggle.querySelector('i');
                    icon.className = 'fas fa-bars';
                }
            });
        }

        // Enhanced Authentication Observer
        onAuthStateChanged(auth, async (user) => {
            if (user) {
                currentAuthUser = user;
                const authUserDocRef = doc(db, "users", currentAuthUser.uid);
                const authUserSnap = await getDoc(authUserDocRef);

                if (authUserSnap.exists()) {
                    currentAuthUserData = authUserSnap.data();
                    updateHeaderUI();
                    await Promise.all([
                        loadFriends(),
                        loadGroups(),
                        updateUserPresence(true)
                    ]);

                    const urlParams = new URLSearchParams(window.location.search);
                    const friendId = urlParams.get('friendId');
                    const groupId = urlParams.get('groupId');

                    if (friendId && friends.has(friendId)) {
                        const friendData = friends.get(friendId);
                        loadChatWindow(friendData, 'friend');
                        highlightConversation(friendId);
                        showChatWindow();
                    } else if (groupId && groups.has(groupId)) {
                        const groupData = groups.get(groupId);
                        loadChatWindow(groupData, 'group');
                        highlightConversation(groupId);
                        showChatWindow();
                    }
                } else {
                    window.location.href = 'index.html';
                }
            } else {
                window.location.href = 'index.html';
            }
        });

        function updateHeaderUI() {
            userNameNavEl.textContent = currentAuthUserData.name;
            userAvatarNavEl.src = currentAuthUserData.avatarUrl || generateAvatar(currentAuthUserData.name);
        }

        // Enhanced Presence System
        async function setupPresenceSystem() {
            if (!currentAuthUser) return;

            // Listen for online users
            const presenceRef = collection(db, 'presence');
            presenceUnsubscribe = onSnapshot(presenceRef, (snapshot) => {
                onlineUsers.clear();
                snapshot.forEach(doc => {
                    const data = doc.data();
                    if (data.online && data.lastSeen && (Date.now() - data.lastSeen.seconds * 1000) < 300000) { // 5 minutes
                        onlineUsers.add(doc.id);
                    }
                });
                updateOnlineStatuses();
            });

            // Update presence every 4 minutes
            setInterval(() => updateUserPresence(true), 240000);
        }

        async function updateUserPresence(online) {
            if (!currentAuthUser) return;

            try {
                const presenceRef = doc(db, 'presence', currentAuthUser.uid);
                await setDoc(presenceRef, {
                    online: online,
                    lastSeen: serverTimestamp(),
                    userId: currentAuthUser.uid
                }, { merge: true });
            } catch (error) {
                console.error('Error updating presence:', error);
            }
        }

        function updateOnlineStatuses() {
            document.querySelectorAll('.online-indicator').forEach(indicator => {
                const conversationItem = indicator.closest('.conversation-item');
                if (conversationItem) {
                    const friendId = conversationItem.dataset.friendId || conversationItem.dataset.groupId;
                    if (onlineUsers.has(friendId)) {
                        indicator.classList.add('truly-online');
                        indicator.classList.remove('offline');
                    } else {
                        indicator.classList.remove('truly-online');
                        indicator.classList.add('offline');
                    }
                }
            });
        }

        // Enhanced avatar generation with better colors
        function generateAvatar(name, isGroup = false) {
            const colors = [
                '#6366f1', '#8b5cf6', '#ec4899', '#ef4444', 
                '#f59e0b', '#10b981', '#06b6d4', '#3b82f6'
            ];
            const color = colors[Math.abs(name.split('').reduce((a, b) => a + b.charCodeAt(0), 0)) % colors.length];
            const initials = name.split(' ').map(word => word[0]).join('').toUpperCase().slice(0, 2);

            const icon = isGroup ? '#' : initials;

            return `data:image/svg+xml;base64,${btoa(`
                <svg width="52" height="52" viewBox="0 0 52 52" xmlns="http://www.w3.org/2000/svg">
                    <defs>
                        <linearGradient id="grad" x1="0%" y1="0%" x2="100%" y2="100%">
                            <stop offset="0%" style="stop-color:${color};stop-opacity:1" />
                            <stop offset="100%" style="stop-color:${color}dd;stop-opacity:1" />
                        </linearGradient>
                    </defs>
                    <rect width="52" height="52" fill="url(#grad)" rx="14"/>
                    <text x="50%" y="50%" font-family="Inter, sans-serif" font-size="${isGroup ? '24' : '20'}" font-weight="600" 
                          text-anchor="middle" dy="0.35em" fill="white">${icon}</text>
                </svg>
            `)}`;
        }

        // Enhanced Friends Loading
        async function loadFriends() {
            if (!currentAuthUser || friendsUnsubscribe) return;

            try {
                const friendsRef = collection(db, "users", currentAuthUser.uid, "friends");
                const friendsQuery = query(friendsRef, where("status", "==", "accepted"));

                friendsUnsubscribe = onSnapshot(friendsQuery, async (snapshot) => {
                    friends.clear();

                    const friendPromises = snapshot.docs.map(async (friendDoc) => {
                        try {
                            const friendId = friendDoc.id;
                            const userDocRef = doc(db, "users", friendId);
                            const userSnap = await getDoc(userDocRef);

                            if (userSnap.exists()) {
                                const userData = userSnap.data();
                                friends.set(friendId, {
                                    id: friendId,
                                    ...userData,
                                    ...friendDoc.data()
                                });
                            }
                        } catch (error) {
                            console.error(`Error loading friend ${friendDoc.id}:`, error);
                        }
                    });

                    await Promise.allSettled(friendPromises);
                    updateConversationsList();
                });

            } catch (error) {
                console.error("Error loading friends:", error);
                showNotification('Error loading conversations', 'error');
            }
        }

        // Enhanced Groups Loading
        async function loadGroups() {
            if (!currentAuthUser) return;

            try {
                const groupsRef = collection(db, "groups");
                const groupsQuery = query(groupsRef, where("members", "array-contains", currentAuthUser.uid));

                onSnapshot(groupsQuery, (snapshot) => {
                    groups.clear();
                    snapshot.forEach(doc => {
                        groups.set(doc.id, { id: doc.id, ...doc.data() });
                    });
                    updateConversationsList();
                });

            } catch (error) {
                console.error("Error loading groups:", error);
            }
        }

        // Enhanced Conversations List Update
        function updateConversationsList() {
            if (friends.size === 0 && groups.size === 0) {
                conversationListBody.innerHTML = `
                    <div style="padding: 3rem 2rem; text-align: center; color: var(--text-secondary);">
                        <i class="fas fa-users" style="font-size: 4rem; margin-bottom: 1.5rem; opacity: 0.3; color: var(--text-muted);"></i>
                        <h3 style="font-size: 1.25rem; margin-bottom: 0.75rem; color: var(--text-primary);">No Conversations Yet</h3>
                        <p style="margin-bottom: 1.5rem; line-height: 1.6;">Connect with friends to start chatting</p>
                        <a href="friends.html" style="color: var(--primary-color); text-decoration: none; font-weight: 500; padding: 0.75rem 1.5rem; border: 2px solid var(--primary-color); border-radius: 12px; transition: all 0.3s ease;">Find Friends</a>
                    </div>
                `;
                return;
            }

            const conversations = [];
            
            // Add friends
            friends.forEach(friend => {
                conversations.push({ ...friend, type: 'friend' });
            });
            
            // Add groups
            groups.forEach(group => {
                conversations.push({ ...group, type: 'group' });
            });

            conversations.sort((a, b) => a.name.localeCompare(b.name));

            conversationListBody.innerHTML = conversations.map(convo => {
                if (convo.type === 'group') {
                    return createGroupConversationHTML(convo);
                } else {
                    return createFriendConversationHTML(convo);
                }
            }).join('');
        }

        function createFriendConversationHTML(friend) {
            const avatarUrl = friend.avatarUrl || generateAvatar(friend.name);
            const isOnline = onlineUsers.has(friend.id);
            const hasUnreadMessages = Math.random() > 0.7;
            const unreadCount = hasUnreadMessages ? Math.floor(Math.random() * 5) + 1 : 0;
            
            return `
                <div class="conversation-item" data-friend-id="${friend.id}" onclick="startConversation('${friend.id}', 'friend')">
                    <div class="convo-avatar-wrapper">
                        <img src="${avatarUrl}" alt="${escapeHtml(friend.name)}" class="convo-avatar">
                        <div class="online-indicator ${isOnline ? 'truly-online' : 'offline'}"></div>
                    </div>
                    <div class="convo-details">
                        <div class="convo-name">${escapeHtml(friend.name)}</div>
                        <div class="last-message">
                            <span class="message-status">Click to start chatting...</span>
                        </div>
                    </div>
                    <div style="display: flex; flex-direction: column; align-items: flex-end; gap: 0.5rem;">
                        <div class="conversation-time">Now</div>
                        ${unreadCount > 0 ? `<div class="unread-count">${unreadCount}</div>` : ''}
                    </div>
                </div>
            `;
        }

        function createGroupConversationHTML(group) {
            const avatarUrl = group.avatarUrl || generateAvatar(group.name, true);
            const memberCount = group.members ? group.members.length : 0;
            const hasUnreadMessages = Math.random() > 0.8;
            const unreadCount = hasUnreadMessages ? Math.floor(Math.random() * 10) + 1 : 0;
            
            return `
                <div class="conversation-item" data-group-id="${group.id}" onclick="startConversation('${group.id}', 'group')">
                    <div class="convo-avatar-wrapper">
                        <div class="group-avatar">
                            ${group.name.charAt(0).toUpperCase()}
                            <div class="group-members-count">${memberCount}</div>
                        </div>
                    </div>
                    <div class="convo-details">
                        <div class="convo-name">${escapeHtml(group.name)}</div>
                        <div class="last-message">
                            <span class="message-status">${memberCount} members</span>
                        </div>
                    </div>
                    <div style="display: flex; flex-direction: column; align-items: flex-end; gap: 0.5rem;">
                        <div class="conversation-time">Now</div>
                        ${unreadCount > 0 ? `<div class="unread-count">${unreadCount}</div>` : ''}
                    </div>
                </div>
            `;
        }

        // Enhanced Conversation Search
        conversationSearch.addEventListener('input', (e) => {
            const searchTerm = e.target.value.toLowerCase();
            const conversationItems = document.querySelectorAll('.conversation-item');
            
            conversationItems.forEach(item => {
                const name = item.querySelector('.convo-name').textContent.toLowerCase();
                const isVisible = name.includes(searchTerm);
                item.style.display = isVisible ? 'flex' : 'none';
            });
        });

        // Enhanced Start Conversation
        window.startConversation = function (id, type) {
            if (type === 'friend') {
                const friendData = friends.get(id);
                if (!friendData) return;
                
                currentChatFriend = friendData;
                currentGroupChat = null;
                highlightConversation(id);
                loadChatWindow(friendData, 'friend');
            } else if (type === 'group') {
                const groupData = groups.get(id);
                if (!groupData) return;
                
                currentGroupChat = groupData;
                currentChatFriend = null;
                highlightConversation(id);
                loadChatWindow(groupData, 'group');
            }
            
            showChatWindow();
        };

        function highlightConversation(id) {
            document.querySelectorAll('.conversation-item').forEach(el => el.classList.remove('active'));
            document.querySelector(`[data-friend-id="${id}"], [data-group-id="${id}"]`)?.classList.add('active');
        }

        function showChatWindow() {
            messagingContainer.classList.add('show-chat');
        }

        window.showConversationList = function() {
            messagingContainer.classList.remove('show-chat');
            currentChatFriend = null;
            currentGroupChat = null;
            
            const placeholder = document.getElementById('chatWindowPlaceholder');
            if (placeholder) {
                chatWindow.innerHTML = placeholder.outerHTML;
            }
            
            if (activeChatUnsubscribe) {
                activeChatUnsubscribe();
                activeChatUnsubscribe = null;
            }
        };

        // Enhanced Chat Window Loading
        function loadChatWindow(chatData, type) {
            if (activeChatUnsubscribe) {
                activeChatUnsubscribe();
            }

            const avatarUrl = type === 'group' ? 
                (chatData.avatarUrl || generateAvatar(chatData.name, true)) :
                (chatData.avatarUrl || generateAvatar(chatData.name));
            
            const isOnline = type === 'friend' ? onlineUsers.has(chatData.id) : false;
            const isTyping = Math.random() > 0.9;
            
            const statusText = type === 'group' ? 
                `${chatData.members ? chatData.members.length : 0} members` :
                (isTyping ? 'typing...' : (isOnline ? 'Active now' : 'Last seen recently'));

            chatWindow.innerHTML = `
                <div class="chat-header">
                    <button class="mobile-back-btn" onclick="showConversationList()" aria-label="Back to conversations">
                        <i class="fas fa-arrow-left"></i>
                    </button>
                    <div class="chat-header-info">
                        ${type === 'group' ? 
                            `<div class="group-avatar" style="width: 48px; height: 48px; font-size: 1.2rem;">${chatData.name.charAt(0).toUpperCase()}</div>` :
                            `<img src="${avatarUrl}" alt="${escapeHtml(chatData.name)}" class="chat-header-avatar">`
                        }
                        <div class="chat-header-details">
                            <h3>${escapeHtml(chatData.name)}</h3>
                            <div class="chat-header-status">
                                ${isTyping ? 
                                    '<span class="typing-indicator">typing...</span>' :
                                    `<span>${statusText}</span>`
                                }
                            </div>
                        </div>
                    </div>
                    <div class="chat-header-actions">
                        ${type === 'friend' ? `
                            <button class="chat-action-btn" onclick="startVoiceCall('${chatData.id}')" data-tooltip="Voice call">
                                <i class="fas fa-phone"></i>
                            </button>
                            <button class="chat-action-btn" onclick="startVideoCall('${chatData.id}')" data-tooltip="Video call">
                                <i class="fas fa-video"></i>
                            </button>
                        ` : `
                            <button class="chat-action-btn" onclick="showGroupInfo('${chatData.id}')" data-tooltip="Group info">
                                <i class="fas fa-users"></i>
                            </button>
                        `}
                        <button class="chat-action-btn" onclick="toggleChatInfo('${chatData.id}')" data-tooltip="Chat info">
                            <i class="fas fa-info-circle"></i>
                        </button>
                    </div>
                </div>
                <div class="message-area" id="messageArea">
                    <div class="message-list" id="messageList">
                        <div class="loading">
                            <div class="spinner"></div>
                            Loading messages...
                        </div>
                    </div>
                </div>
                <div class="message-input-area">
                    <div class="input-wrapper">
                        <textarea class="message-input" id="messageInput" placeholder="Type a message..." rows="1"></textarea>
                        <div class="input-actions">
                            <button class="input-action-btn" onclick="showUploadModal()" data-tooltip="Attach file">
                                <i class="fas fa-paperclip"></i>
                            </button>
                            <button class="input-action-btn" onclick="startVoiceRecording()" data-tooltip="Voice message">
                                <i class="fas fa-microphone"></i>
                            </button>
                        </div>
                    </div>
                    <button class="send-btn" id="sendBtn" onclick="sendMessage('${chatData.id}', '${type}')" aria-label="Send message">
                        <i class="fas fa-paper-plane"></i>
                    </button>
                </div>
            `;

            setupMessageInput();
            listenForMessages(chatData.id, type);
        }

        // Enhanced Message Input Setup
        function setupMessageInput() {
            const messageInput = document.getElementById('messageInput');
            const sendBtn = document.getElementById('sendBtn');

            if (!messageInput || !sendBtn) return;

            messageInput.addEventListener('input', function() {
                this.style.height = 'auto';
                this.style.height = Math.min(this.scrollHeight, 120) + 'px';
                
                sendBtn.disabled = !this.value.trim();
                sendBtn.style.opacity = this.value.trim() ? '1' : '0.6';

                handleTypingIndicator();
            });

            messageInput.addEventListener('keydown', function(e) {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    if (this.value.trim()) {
                        const chatId = currentChatFriend?.id || currentGroupChat?.id;
                        const type = currentChatFriend ? 'friend' : 'group';
                        if (chatId) sendMessage(chatId, type);
                    }
                }
            });

            sendBtn.disabled = true;
            sendBtn.style.opacity = '0.6';
        }

        function handleTypingIndicator() {
            if ((!currentChatFriend && !currentGroupChat) || currentAuthUser.uid.startsWith('demo-user')) return;

            if (!isTyping) {
                isTyping = true;
                // Send typing status to Firebase in real implementation
            }

            if (typingTimeout) clearTimeout(typingTimeout);
            typingTimeout = setTimeout(() => {
                isTyping = false;
                // Send stop typing status to Firebase in real implementation
            }, 1000);
        }

        // Enhanced Message Listening
        function listenForMessages(chatId, type) {
            const collectionPath = type === 'group' ? 
                `groups/${chatId}/messages` : 
                `chats/${getChatId(chatId)}/messages`;
            
            const messagesRef = collection(db, collectionPath);
            const q = query(messagesRef, orderBy("timestamp", "asc"), limit(50));

            activeChatUnsubscribe = onSnapshot(q, (querySnapshot) => {
                const messageList = document.getElementById('messageList');
                const messageArea = document.getElementById('messageArea');
                if (!messageList || !messageArea) return;

                if (querySnapshot.empty) {
                    const chatName = currentChatFriend?.name || currentGroupChat?.name || 'your friend';
                    messageList.innerHTML = `
                        <div style="text-align: center; padding: 3rem 2rem; color: var(--text-secondary);">
                            <i class="fas fa-comment" style="font-size: 3rem; margin-bottom: 1.5rem; opacity: 0.3; color: var(--text-muted);"></i>
                            <h3 style="font-size: 1.25rem; margin-bottom: 0.75rem; color: var(--text-primary);">Start the conversation</h3>
                            <p style="line-height: 1.6;">Send the first message to ${escapeHtml(chatName)}</p>
                        </div>
                    `;
                    return;
                }

                const messages = [];
                querySnapshot.forEach(doc => {
                    messages.push({ id: doc.id, ...doc.data() });
                });

                let messagesHTML = messages.map(message => createMessageBubbleHTML(message, type)).join('');
                
                // Add typing indicator occasionally
                if (Math.random() > 0.95 && messages.length > 0) {
                    messagesHTML += `
                        <div class="typing-indicator-bubble">
                            <div class="typing-dots">
                                <div class="typing-dot"></div>
                                <div class="typing-dot"></div>
                                <div class="typing-dot"></div>
                            </div>
                            <span style="font-size: 0.875rem; color: var(--text-secondary); margin-left: 0.5rem;">Someone is typing...</span>
                        </div>
                    `;
                }

                messageList.innerHTML = messagesHTML;
                
                setTimeout(() => {
                    messageArea.scrollTop = messageArea.scrollHeight;
                }, 100);

                markMessagesAsRead(messages);
            }, (error) => {
                console.error("Error listening to messages:", error);
                const messageList = document.getElementById('messageList');
                if (messageList) {
                    messageList.innerHTML = '<div style="text-align: center; padding: 2rem; color: var(--danger-color);">Error loading messages. Please refresh.</div>';
                }
            });
        }

        // Enhanced Message Bubble Creation
        function createMessageBubbleHTML(message, chatType = 'friend') {
            const isSent = message.senderId === currentAuthUser.uid;
            const timestamp = message.timestamp ?
                new Date(message.timestamp.seconds * 1000).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }) :
                '';

            const safeText = escapeHtml(message.text || '');
            
            // Get sender name for group chats
            let senderName = '';
            if (chatType === 'group' && !isSent && message.senderName) {
                senderName = `<div style="font-size: 0.8rem; color: var(--primary-color); margin-bottom: 0.25rem; font-weight: 500;">${escapeHtml(message.senderName)}</div>`;
            }
            
            let messageContent = senderName;
            
            if (message.type === 'image') {
                messageContent += `
                    <img src="${message.imageUrl}" alt="Shared image" class="message-image" onclick="openImageModal('${message.imageUrl}')">
                    ${message.text ? `<div class="message-content">${safeText}</div>` : ''}
                `;
            } else if (message.type === 'video') {
                messageContent += `
                    <video src="${message.videoUrl}" class="message-video" controls>
                        Your browser does not support the video tag.
                    </video>
                    ${message.text ? `<div class="message-content">${safeText}</div>` : ''}
                `;
            } else if (message.type === 'file') {
                messageContent += `
                    <div class="message-file" onclick="downloadFile('${message.fileUrl}', '${message.fileName}')">
                        <i class="fas fa-file file-icon"></i>
                        <div class="file-info">
                            <h4>${escapeHtml(message.fileName)}</h4>