rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isAdmin() {
      return isAuthenticated() && 
        (
          // Check if user document exists with admin role
          (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
           get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin') ||
          // Temporary: Allow specific admin email (replace with your email)
          request.auth.token.email == 'lateefddid4@gmail.com'
        );
    }

    function isInstructor() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'instructor';
    }

    function isMember() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'member';
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function hasValidRole() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'instructor', 'member', 'user'];
    }

    function isFriend(userId) {
      return isAuthenticated() &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)/friends/$(userId)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)/friends/$(userId)).data.status == 'accepted';
    }

    function isParticipant(chatId) {
      return isAuthenticated() && 
        (chatId.matches('.*' + request.auth.uid + '_.*') || 
         chatId.matches('.*_' + request.auth.uid + '.*') ||
         chatId.matches(request.auth.uid + '_.*'));
    }

    // --- USER PROFILES ---
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if (isAuthenticated() && request.auth.uid == userId &&
        request.resource.data.keys().hasAll(['name', 'email']) &&
        request.resource.data.email == request.auth.token.email) || 
        isAdmin() || 
        // Allow creation for instructor approval process - any authenticated user can create instructor profiles
        (isAuthenticated() && request.resource.data.role == 'instructor') ||
        // Allow server-side creation for instructor approval
        (!isAuthenticated() && request.resource.data.role == 'instructor');
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isAdmin();
      
      // Friends subcollection - Enhanced for friend management system
      match /friends/{friendId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated() && 
          (request.auth.uid == userId || request.auth.uid == friendId) &&
          request.resource.data.keys().hasAll(['status', 'createdAt']) &&
          request.resource.data.status in ['pending_to', 'pending_from', 'accepted'];
        allow update: if isAuthenticated() && 
          (request.auth.uid == userId || request.auth.uid == friendId) &&
          request.resource.data.status in ['accepted', 'pending_to', 'pending_from'];
        allow delete: if isAuthenticated() && (request.auth.uid == userId || request.auth.uid == friendId);
      }
      
      // Notifications subcollection
      match /notifications/{notificationId} {
        allow read: if isOwner(userId);
        allow create: if isAuthenticated();
        allow update: if isOwner(userId) || isAdmin();
        allow delete: if isOwner(userId) || isAdmin();
      }
    }

    // --- GLOBAL NOTIFICATIONS COLLECTION ---
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && 
        (resource.data.recipientId == request.auth.uid || 
         resource.data.senderId == request.auth.uid);
      allow create: if isAuthenticated() && 
        request.resource.data.senderId == request.auth.uid &&
        request.resource.data.keys().hasAll(['recipientId', 'senderId', 'timestamp']);
      allow update: if isAuthenticated() && 
        (resource.data.recipientId == request.auth.uid || isAdmin());
      allow delete: if isAuthenticated() && 
        (resource.data.recipientId == request.auth.uid || 
         resource.data.senderId == request.auth.uid || 
         isAdmin());
    }

    // --- CHAT SYSTEM ---
    match /chats/{chatId} {
      // Allow creation of chat documents
      allow read: if isAuthenticated() && isParticipant(chatId);
      allow create: if isAuthenticated() && isParticipant(chatId);
      allow update: if isAuthenticated() && isParticipant(chatId);
      
      // Messages subcollection
      match /messages/{messageId} {
        allow read: if isAuthenticated() && isParticipant(chatId);
        allow create: if isAuthenticated() && isParticipant(chatId) &&
          request.resource.data.keys().hasAll(['senderId', 'timestamp']) &&
          request.resource.data.senderId == request.auth.uid;
        allow update: if isAuthenticated() && isParticipant(chatId) &&
          (resource.data.senderId == request.auth.uid || 
           isAdmin() ||
           // Allow participants to mark messages as read
           (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read', 'readAt', 'readBy']) &&
            request.resource.data.readBy == request.auth.uid));
        allow delete: if isAuthenticated() && 
          (resource.data.senderId == request.auth.uid || isAdmin());
      }
      
      // Typing indicators subcollection
      match /typing/{userId} {
        // Allow users to manage their own typing status
        allow read: if isAuthenticated() && isParticipant(chatId);
        allow write: if isAuthenticated() && 
          request.auth.uid == userId &&
          isParticipant(chatId);
      }
    }

    // --- CORE CONTENT ---
    match /posts/{postId} {
      allow read, list: if isAuthenticated();
      allow create: if isAuthenticated() && 
        request.resource.data.authorId == request.auth.uid;
      allow update: if isAuthenticated() &&
        (request.resource.data.diff(resource.data).affectedKeys()
            .hasOnly(['likes', 'likeCount', 'commentCount']) ||
         (resource.data.authorId == request.auth.uid) ||
         isAdmin());
      allow delete: if isAuthenticated() && 
        (resource.data.authorId == request.auth.uid || isAdmin());
      // Post reactions subcollection
      match /reactions/{userId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated() && request.auth.uid == userId;
        allow update: if isAuthenticated() && request.auth.uid == userId;
        allow delete: if isAuthenticated() && (request.auth.uid == userId || isAdmin());
      }
      
      // Comments subcollection - FIXED RULES
      match /comments/{commentId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated() && 
          request.resource.data.keys().hasAll(['content', 'authorId', 'authorName', 'timestamp']) &&
          request.resource.data.authorId == request.auth.uid;
        allow update: if (isAuthenticated() && resource.data.authorId == request.auth.uid) || isAdmin();
        allow delete: if (isAuthenticated() && resource.data.authorId == request.auth.uid) || isAdmin();
        allow list: if isAuthenticated();
      }
    }
    
    // --- ANNOUNCEMENTS ---
    match /announcements/{announcementId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAdmin();
    }

    // --- COURSES & LESSONS ---
    match /courses/{courseId} {
      // Allow all authenticated users to list and read published, approved courses
      allow list: if isAuthenticated();
      allow read: if isAuthenticated() && 
        (resource.data.status == "published" && resource.data.isApproved == true) ||
        isAdmin() || 
        (isInstructor() && resource.data.instructorId == request.auth.uid);
      allow create: if isInstructor() && request.resource.data.instructorId == request.auth.uid;
      allow update: if isAdmin() || (isInstructor() && resource.data.instructorId == request.auth.uid);
      allow delete: if isAdmin() || (isInstructor() && resource.data.instructorId == request.auth.uid);
      
      // Lessons subcollection
      match /lessons/{lessonId} {
        allow read: if isAuthenticated();
        allow write: if isInstructor() && get(/databases/$(database)/documents/courses/$(courseId)).data.instructorId == request.auth.uid;
      }
      
      // Course enrollments (subcollection)
      match /enrollments/{userId} {
        allow read: if isAuthenticated() && (request.auth.uid == userId || isAdmin() || isInstructor());
        allow create: if isAuthenticated() && request.auth.uid == userId;
        allow update, delete: if isAdmin() || (isAuthenticated() && request.auth.uid == userId);
      }
    }

    // --- ENROLLMENTS (Top-level collection) ---
    match /enrollments/{enrollmentId} {
      allow list: if isAuthenticated();
      allow read: if isAuthenticated() && 
        (resource.data.studentId == request.auth.uid || 
         isAdmin() || 
         isInstructor());
      allow create: if isAuthenticated() && 
        request.resource.data.studentId == request.auth.uid;
      allow update, delete: if isAdmin() || 
        (isAuthenticated() && resource.data.studentId == request.auth.uid);
    }

    // --- MENTORSHIP SLOTS ---
    match /mentorshipSlots/{slotId} {
      allow read: if isAuthenticated();
      allow create: if isInstructor() && request.resource.data.instructorId == request.auth.uid;
      allow update, delete: if isInstructor() && resource.data.instructorId == request.auth.uid;
    }

    // --- BOOKINGS ---
    match /bookings/{bookingId} {
      allow create: if isAuthenticated() && 
        request.resource.data.keys().hasAll(['studentId', 'instructorId']) &&
        request.resource.data.studentId == request.auth.uid;
      
      allow read: if isAuthenticated() && 
        (resource.data.studentId == request.auth.uid || 
         resource.data.instructorId == request.auth.uid ||
         isAdmin());
         
      allow update: if isAuthenticated() && 
        (resource.data.studentId == request.auth.uid || 
         resource.data.instructorId == request.auth.uid ||
         isAdmin());
         
      allow delete: if isAdmin() || 
        (isAuthenticated() && resource.data.studentId == request.auth.uid);
    }

    // --- CHAT SESSIONS (Legacy - keeping for backward compatibility) ---
    match /chatSessions/{sessionId} {
      allow read: if isAuthenticated() && 
        (request.auth.uid in resource.data.participants || isAdmin());
        
      allow create: if isAuthenticated() && 
        request.auth.uid in request.resource.data.participants;
        
      allow update: if isAuthenticated() && 
        (request.auth.uid in resource.data.participants || isAdmin());
        
      allow delete: if isAdmin();
      
      // Chat messages within sessions
      match /messages/{messageId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated() && 
          request.resource.data.senderId == request.auth.uid;
        allow update, delete: if isAdmin() || 
          (isAuthenticated() && resource.data.senderId == request.auth.uid);
      }
    }

    // --- TRANSACTIONS & PAYMENTS ---
    match /transactions/{transactionId} {
      allow read: if isAdmin() || 
        (isAuthenticated() && 
         (resource.data.studentId == request.auth.uid || 
          resource.data.instructorId == request.auth.uid));
      allow create: if isAuthenticated();
      allow update, delete: if isAdmin();
    }

    match /payments/{paymentId} {
      allow read: if isAdmin() || 
        (isAuthenticated() && resource.data.userId == request.auth.uid);
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAdmin();
    }

    // --- INSTRUCTOR EARNINGS ---
    match /instructor_earnings/{instructorId} {
      allow read: if isAdmin() || (isInstructor() && request.auth.uid == instructorId);
      allow write: if isAdmin();
    }

    // --- INSTRUCTORS COLLECTION ---
    match /instructors/{instructorId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.auth.uid == instructorId;
      allow update: if isAdmin() || (isAuthenticated() && request.auth.uid == instructorId);
      allow delete: if isAdmin();
    }

    // --- PLATFORM STATS ---
    match /platform_stats/{statId} {
      allow read, write: if isAdmin();
    }

    // --- RATINGS AND REVIEWS ---
    match /reviews/{reviewId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
        request.resource.data.reviewerId == request.auth.uid;
      allow update: if isAdmin() || 
        (isAuthenticated() && resource.data.reviewerId == request.auth.uid);
      allow delete: if isAdmin();
    }

    // --- USER PROFILES BY ROLE ---
    match /instructor_profiles/{instructorId} {
      allow read: if isAuthenticated();
      allow create, update: if isInstructor() && request.auth.uid == instructorId;
      allow delete: if isAdmin();
    }

    match /member_profiles/{memberId} {
      allow read: if isAuthenticated();
      allow create, update: if isMember() && request.auth.uid == memberId;
      allow delete: if isAdmin();
    }

    // --- PUBLIC LIBRARY ---
    match /library/{resourceId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if (isAuthenticated() && resource.data.uploaderId == request.auth.uid) || isAdmin();
      allow delete: if isAdmin() || (isAuthenticated() && resource.data.uploaderId == request.auth.uid);
    }

    // --- QUESTION OF THE DAY SYSTEM ---
    match /questions/{questionId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAdmin();
    }
    
    match /active_question/{document} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    match /question_responses/{responseId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAdmin() || 
        (isAuthenticated() && resource.data.userId == request.auth.uid);
    }

    // --- SEARCH FUNCTIONALITY ---
    match /search_cache/{cacheId} {
      allow read, write: if isAuthenticated();
    }

    // --- HASHTAGS & TRENDING ---
    match /hashtags/{hashtagId} {
      allow read: if isAuthenticated();
      allow create, update: if isAuthenticated();
      allow delete: if isAdmin();
    }

    match /trending_topics/{topicId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // --- USER ACTIVITIES & ENGAGEMENT ---
    match /user_activities/{activityId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAdmin() || (isAuthenticated() && resource.data.userId == request.auth.uid);
    }

    // --- LIVE EVENTS ---
    match /liveEvents/{eventId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAdmin() || isInstructor();
      
      // Event participants
      match /participants/{userId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated() && request.auth.uid == userId;
        allow delete: if isAuthenticated() && (request.auth.uid == userId || isAdmin());
      }
    }

    // --- SESSION FEEDBACK ---
    match /session_feedback/{feedbackId} {
      allow read: if isAdmin() || 
        (isAuthenticated() && 
         (request.auth.uid == resource.data.studentId || 
          request.auth.uid == resource.data.instructorId));
      allow create: if isAuthenticated() && 
        (request.resource.data.studentId == request.auth.uid ||
         request.resource.data.instructorId == request.auth.uid);
      allow update, delete: if isAdmin();
    }

    // --- DISPUTE RESOLUTION ---
    match /disputes/{disputeId} {
      allow read: if isAdmin() || 
        (isAuthenticated() && 
         (request.auth.uid == resource.data.studentId || 
          request.auth.uid == resource.data.instructorId));
      allow create: if isAuthenticated() && 
        (request.resource.data.studentId == request.auth.uid ||
         request.resource.data.instructorId == request.auth.uid);
      allow update, delete: if isAdmin();
    }

    // --- SITE CONFIGURATION ---
    match /site_config/{configId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // --- MODERATION ---
    match /moderation_alerts/{alertId} {
      allow create: if isAuthenticated();
      allow read, update, delete: if isAdmin();
    }

    match /user_reports/{reportId} {
      allow create: if isAuthenticated();
      allow read, update, delete: if isAdmin();
    }

    // --- ANALYTICS & METRICS ---
    match /analytics/{analyticsId} {
      allow read, write: if isAdmin();
    }

    match /user_metrics/{userId} {
      allow read: if isAuthenticated() && (request.auth.uid == userId || isAdmin());
      allow write: if isAdmin();
    }

    // --- EXISTING COLLECTIONS ---
    match /resources/{resourceId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update, delete: if isAdmin() || (isAuthenticated() && resource.data.uploaderId == request.auth.uid);
    }
    
    match /testimonials/{testimonialId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update, delete: if isAdmin() || (isAuthenticated() && resource.data.userId == request.auth.uid);
    }

    // --- USER CONNECTIONS ---
    match /friend_requests/{requestId} {
      allow read: if isAuthenticated() && 
        (request.auth.uid == resource.data.fromUserId || 
         request.auth.uid == resource.data.toUserId);
      allow create: if isAuthenticated() && request.resource.data.fromUserId == request.auth.uid;
      allow update: if isAuthenticated() && request.auth.uid == resource.data.toUserId;
      allow delete: if isAuthenticated() && 
        (request.auth.uid == resource.data.fromUserId || 
         request.auth.uid == resource.data.toUserId || 
         isAdmin());
    }

    // --- APPLICATION TRACKING ---
    match /instructor_applications/{applicationId} {
      // Allow server functions to create applications
      allow create: if request.auth == null || (isAuthenticated() && request.resource.data.userId == request.auth.uid);
      
      // Allow admins to read and update applications
      allow read, update: if isAdmin();
      
      // Allow users to read their own applications by email or userId
      allow read: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || 
         resource.data.email == request.auth.token.email);
      
      // Allow listing for authenticated users to find their applications
      allow list: if isAuthenticated();
      
      allow delete: if isAdmin();
    }

    // --- AUDIT LOGS ---
    match /audit_logs/{logId} {
      allow read, write: if isAdmin();
    }

    // --- SYSTEM MESSAGES ---
    match /system_messages/{messageId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // --- ADMIN NOTIFICATIONS ---
    match /admin_notifications/{notificationId} {
      // Allow server functions (unauthenticated) to create notifications
      allow create: if request.auth == null || isAdmin();
      // Only admins can read/update/delete notifications
      allow read, update, delete: if isAdmin();
    }
    
    // --- ADMIN ACTIONS LOG ---
    match /admin_actions/{actionId} {
      // Only admins can read/write action logs
      allow read, write: if isAdmin();
    }

    // --- DONATIONS ---
    match /donations/{donationId} {
      // Allow anyone to create donations (for anonymous donations)
      allow create: if true;
      // Allow admins to read all donations
      allow read: if isAdmin();
      // Allow users to read their own donations if they're authenticated
      allow read: if isAuthenticated() && resource.data.donorEmail == request.auth.token.email;
      // Only admins can update/delete donations
      allow update, delete: if isAdmin();
    }

    // --- SITE STATISTICS ---
    match /site_stats/{statId} {
      // Allow anyone to create stats entries (for donation tracking)
      allow create: if true;
      // Allow authenticated users to read stats
      allow read: if isAuthenticated();
      // Only admins can update/delete stats
      allow update, delete: if isAdmin();
    }

    // --- FALLBACK RULE ---
    match /{document=**} {
      allow read: if false; // Explicitly deny unmatched paths for security
    }
  }
}
